NAME:
LOGIN:

Part 2, Assignment #4, COS 326
------------------------------

Part 2.1: 
---------

For each of the following, either:
 * explain in a sentence why the named function is total, or
 * give a counter-example showing it is not total.

(a) inc: let inc (x:int) : int = x + 1 ;; A total function since it will always terminate.

(b) biginc: let biginc x = x + max_int ;; A total function. This will overflow, but will still always return an int.
 
(c) bigdiv: let bigdiv x = max_int/x ;; Partial; possible division by zero.

(d) search: searching of a tree looks total.

(e) twice: Partial -> let twice (f : int -> int) : int = f (f 0) ;; let f x = 10 / x ;; twice f (* error *)

(f) gen: I think this is actually total. gen () will always return a function, which is a value. If you 
	 were to call something like "gen () ()" then this will fail, but gen () will always return a value
	 given an unit input.

Part 2.2:
--------

Prove that for all a, b, c : complex,
cadd a (cadd b c) == cadd (cadd a b) c

Proof:
	let cadd (b:complex) (c:complex) = 	(* equivalent to function online through alpha conversion *)
	  let (b1, b2) = c1 in
	  let (c1, c2) = c2 in 
	    (b1 + c1, b2 + c2) ;;		

	theorem: for complex numbers a, b, and c, cadd a (cadd b c) = cadd (cadd a b) c; i.e. the
		 operation is associative.

	cadd a (cadd b c) = 
		         
		(1): cadd a (b1 + c1, b2 + c2) 			(* eval *)

		(2): (a1 + b1 + c1, a2 + b2 + c2) 		(* eval *)

	cadd (cadd a b) c = 

		(3): cadd (a1 + b1, a2 + b2) c 			(* eval *)

		(4): (a1 + b1 + c1, a2 + b2 + c2)		(* eval *)

		(5): (2) = (4)					(* math *)
	
		(6): cadd a (cadd b c) = cadd (cadd a b) c	(* reverse eval *)


Part 2.3: 
---------

Prove that for all integer lists xs and ys,
max (maxs xs) (maxs ys) == (maxs (append xs ys)).

Clearly justify each step of your proof.

Proof:  By induction on the structure of the list xs.

3case xs == []:

To show: max (maxs []) (maxs ys) = (maxs (append [] ys))

Proof:

	(1): max (maxs []) (maxs ys)

	(2): max (min_int) (maxs ys)				(* eval -- [] is a value *) 

	(3): maxs ys						(* min_int *)

	(4): maxs (append [] ys)				(* reverse eval append *)

	(aside): append [] ys == ys				(* eval append *)
	(aside): ys == append [] ys				(* symmetry *)

case xs == hd::tail:

IH: max (maxs tail) (maxs ys) == (maxs (append tail ys)) (* assume base case is correct *)

To show: max (maxs (hd :: tail)) (maxs ys) == maxs (append (hd :: tail) ys) (* prove the jump *)

Proof:

	(5): max (maxs (hd :: tail)) (maxs ys)

	(6): max (max hd (maxs tail)) (maxs ys) 		(* eval maxs -- (hd :: tail) is valuable *)

	(7): max hd (max (maxs tail) (maxs ys))			(* max associativity *)

	(8): max hd (maxs (append tail ys))			(* IH *)

	(9): maxs (append (hd :: tail) ys)			(* reverse eval maxs *)			

QED!

Part 2.4: 
---------

(a) Prove that for all integer lists l, bump1 l == bump2 l.

case: l == []:

to show: bump1 [] == bump2 []:

proof:

	(1): bump1 []

	(2): []							(* eval bump1 -- [] is a value *)

case: l == hd :: tail:

IH: bump1 tail == bump2 tail

to show: bump1 (hd :: tail) == bump2 (hd :: tail)

proof: 

(b) Prove that for all integer lists l, bump1 l == bump3 l.

Proof:








(c) In one sentence, what's the big difference between parts (a) and (b)?





Part 2.5:
---------

Either prove or disprove each of the following. You will do any proofs using
induction on lists and you will disprove any false statement by providing a
counter-example to the claim.  When you do a proof, be sure to use the 
standard template for list proofs.

(a) For all l : ('a * 'b) list, zip(unzip l) == l.







(b) For all l1 : 'a list, l2 : 'b list, unzip(zip (l1,l2)) == (l1,l2).
