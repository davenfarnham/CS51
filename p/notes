- lexical scoping
	- This happens normally through substituting. Substitute a value for a variable in an expression based on its closest 
	  binding.

	[1]	let x = 4 in 
	[2]	  let f = fun y -> y + x in 
	[3]	    let x = 3 in 
	[4]	      f 3 ;; 		-> (* 7 *)

- dynamic scoping
	- Keep a mapping of variables -> values and update this mapping based on the latest binding.

	[1]	let x = 4 in 
	[2]	  let f = fun y -> y + x in 
	[3]	    let x = 3 in
	[4]	      f 3 ;; 		-> (* 6 *)

- closures
	- In closures, you basically keep track of the environment for functions. So, for example, in line [2], the closure
	  would look something like: Closure (fun y -> y + x; [x = 4]) s.t. you keep track of the value for x at the time
	  the function is declared. This will behave similar to how lexical scoping behaves and is how OCaml evaluates functions.

- alpha conversion
	- This is simply a technique where you rename all unique variables to clearly delineate exclusivity.

		let a = 4 in 
		  let a = 3 in 
		    let b = 2 + a in 
		      let b = b + 3 in 
	        	b ;;

		let a = 4 in 
		  let c = 3 in 
		    let b = 2 + c in 
		      let d = b + 3 in 
			d ;; 		-> (* 8 *)

- pattern matching
 	- I think this was so hard simply because of all the cases to be considered. 
	  I'm pretty sure I covered most cases, but I'm not 100%. (list of tests in eval.ml)

	- I changed the signature for pattern_match to always include the original expression you're
	  matching on. This is for cases like:

		let x = [1; 2; 3] in match x with 
				     | [] -> 0 
				     | hd :: [] -> hd 
				     | hd :: hd' :: [] -> hd + hd' ;;

	   where pattern_match will first match on (hd :: []) substituting 1 for hd in the expression (hd). When it 
	   tries to match on [], however, it won't be able to. In this case, you want to continue iterating through the
	   ((pattern * exp) list), but you want x to be the original [1;2;3] not the already partially iterated through [2;3].

	- Another difficulty comes from the fact list patterns and list expression look substantially different. For example:

		[hd; tl] ->
				exp: Data_e("Cons", [Var_e "hd"; Data_e ("Cons", [Var_e "tl"; Data_e ("Nil", [])])])
				pat: Data_p("Cons", [hd; tl])

	  Dealing with these varying structures is why I came up with de_cons (), flatten (), etc. The way I handled matching
	  was that is they both had a similar constructor, like "Cons", I would deal with the first term in the exp list and the
          pat list. I would then recursively call the function on the tail of the list. This would cause an issue since the pat 
	  would go from a: Data_p ("Cons", list) -> list. To deal with this, I tack on the constructor again s.t. I get the same
	  structure in the recursive call. 

	  This can, sometimes, cause incorrect syntax such as Data_p ("Cons", [Data_p ("Nil", [])]), which is handled in de_cons.

- proofs
	- valuable
		- a valuable expression is one that always terminates and produces a value

	- total
		- a total function is one that, when supplied with an argument, will terminate.

	- partial
		- a partial function is one that might (1) loop forever or (2) raise an exception

	- a valuable expression will always produce a value. Therefore, all properties of values will
	  also hold for valuable expressions (since these expressions are essentually values).

	- induction: prove that the theorem works on the base case. prove that it works on any case -> case + 1.
		     by induction, it should work on all cases.

- todo
	- why is it important to know when an expression is valuable?
		- when you're substituting an expression into a function, you need to know that it's valuable. For 
		  example, say you have a total function:

			let inc (x:int) : int = x + 1 ;;

		  this function will always terminate. When proving things, you'll frequently want to evaluate the
		  function by passing in the parameter (in this case x) and using the resultant expression (x + 1).
		  But this only works if the argument you are passing in is valuable (i.e. terminates). If not:

			let rec forever () : int = forever () ;;

			inc (forever ()) ;;	continuous loop =/= int

		  you can't evaluate the expression (i.e. use x + 1 while further proving a theorem).

	- reverse evaluation is proved by evaluation in one direction + symmetry.

		let op a b c = (a + b) * c ;;

		if I want to prove that (1 + 2) * 3 = op 1 2 3:		

		(1 + 2) * 3 = 

			(1) op 1 2 3 = (1 + 2) * 3 		(* eval *)
			(2) (1 + 2) * 3 = op 1 2 3		(* symmetry; x = y then y = x *)

			= op 1 2 3 

		QED


