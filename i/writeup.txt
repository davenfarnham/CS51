Expr.ml:

	Freevars: A free variable is any variable that isn't bound. For example, in a let:

			let x = 5 in x + 5 ;;

		  You can rewrite this as an application: (fun x -> x + 5) 5 ;; 'x' in this 
		  case is not free; I wouldn't want to replace x with any other value than 
		  what is being applied to the function. For example:

			let x = 5 in let f = (fun y -> y + x) in f 10 ;;

		  This breaks into a couple expressions:

			Let(x, 5, Let(f, Fun(y, Binop(+, y, x)), App(f, 10)))

		  You could rewrite this:

			(fun x -> ((fun f -> f 10) (fun y -> y + x))) 5

		  There are no free variables that aren't already assigned a value.

		  For a letrec:

			let rec x = fun y -> x in x ;;

			(fun x -> x) (fun y -> x)

		  'x' is not free in this above expression. 

			let x = fun y -> x in x ;;
	
			(fun x -> x) (fun y -> x) ;; (* this would be an error, since it's recursive
							but not declared recursively; the way rules are
							defined, though, 'x' would be free in this instance. *)

eval_s:

		For Let:

			(fun y -> k + x + y) (x -> y + 10) 
		
			(fun z -> k + (y + 10) + z) (* so y is a free variable in x -> y + 10.
						       Change y -> z so you make up for changing the
						       name of the function to 'z' *)
						    
		For Letrec: this was one of the harder substitutions. All you need to remember is that you're
			    basically unravelling the letrec step by step. So, for example, if you have:

			let rec f = fun x -> if x = 0 then x else f (x - 1) in f 3 ;;

			replace f with its recursive definition and then just treat the above as a let:

			let f = fun x -> if x = 0 then x else (let rec f = fun x -> if x = 0 then x else f (x - 1) in f) (x - 1) in f 3 ;;
			
			  -> (fun x -> if x = 0 then x else (let rec f = fun x -> if x = 0 then x else f (x - 1) in f) (x - 1)) 3

			  -> (let rec f = fun x -> if x = 0 then x else f (x - 1) in f) (2)				

			  -> (let f = fun x -> if x = 0 then x else (let rec f = fun x -> if x = 0 then x else f (x - 1) in f) (x - 1) in f) (2) 
			    
			  -> (fun x -> if x = 0 then x else (let rec f = fun x -> if x = 0 then x else f (x - 1) in f) (x - 1)) 2

			  -> (let rec f = fun x -> if x = 0 then x else f (x - 1) in f) (1)

			  -> continue ... 

eval_d:

	instead of using substitution semantics, keep a running env. For example:

		let x = 1 in 
		  x + x ;;

	when you evaluate the binary operation, you'll have an environment [(x, 1)] where you can replace each
	x with 1.

	the problem with this is it doesn't deal with lexical scoping. For example:

		let x = 1 in 
		  let f = fun y -> y + x in
		    let x = 2 in
		      f 5 ;;			-> (7) since x was most recently bound to 2

	to get around dynamic scoping, deal with closures.

eval_l:

	lexical scoping uses closures. So, for example:

		let x = 1 in 
		  let f = fun y -> y + x in
                    let x = 2 in
                      f 5 ;;			-> (6)

	hitting a function in this case creates a closure, so the environment for the whole expression would be:

		[Closure ((f, fun y -> y + x), [(x, 1)]); (x, 1)]
			
		  -> [Closure ((f, fun y -> y + x), [(x, 1)]); (x, 2)]
  
	if you want to evaluate f, then use the env within its closure.

lists:

	I had to add some code to the parser to deal with lists. The only real thing to remember is it's	
	smarter to use left recursion instead of right. So, for example, when parsing lists:

		list: exp
		      | list SEMI exp

	this will turn a list like [1;2;3;4] -> 

		(((1; 2); 3); 4)

	and since everything basically uses concat, this becomes:

		Concat(Concat(Concat(Concat(1, 2), 3), 4), [])

	this is better for the parser since, unlike right recursion which would create this:

		(1; (2; (3; (4; []))))

	it can start evaluating (1; 2) right away, and therefore fewer things have to be pushed onto the stack.
